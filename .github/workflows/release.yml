name: Release

on:
  release:
    types: [ published, created, edited, prereleased, released ]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag for this release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write

concurrency:
  group: RELEASE-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  make_draft:
    name: Make draft release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_draft.outputs.release_id }}
      version: ${{ steps.get_version.outputs.version }}
    env:
      version: placeholder

    steps:
      - uses: actions/checkout@v3

      - name: Run CI
        uses: ./.github/workflows/ci.yml

      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [[ ${{ github.event_name }} == 'release' ]]; then
            version=${GITHUB_REF#refs/tags/}
          else
            version=${{ github.event.inputs.tag_name }}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_ENV
          echo "FOUND VERSION $version"
      
      - name: Create draft
        id: create_draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view ${{ env.version }}; then
            gh release edit ${{ env.version }} --draft
          else
            gh release create ${{ env.version }} --draft --title "${{ env.version }}" --generate-notes
          fi
          release_id=$(gh release view v2.1.0 --json id -q ".id")

          echo "release_id=$release_id" >> $GITHUB_OUTPUT

  build:
    name: Build
    needs: make_draft
    runs-on: ubuntu-latest
    env:
      release_id: ${{needs.make_draft.outputs.release_id}}
      version: ${{needs.make_draft.outputs.version}}
    steps:
      - uses: CompeyDev/setup-rokit@v0.1.0
      - uses: actions/checkout@v3

      - name: Install Toolchain
        run: rokit install --no-trust-check
        
      - name: Run script
        run: lune run release

      - name: Upload libraries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd output
          for dir in */; do
            dir=${dir%/}
            echo "UPLOADING ${dir}"
            (cd "$dir" && zip -r "../${dir}.zip" .)
            gh release upload ${{ env.release_id }} "${dir}.zip" --clobber
          done

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rbxlibs-${{ env.version }}-ALL-LIBS
          path: output/ALL_LIBS.zip